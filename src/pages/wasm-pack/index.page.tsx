import { useEffect, useRef } from 'react';
import { Renderer } from './main';
import { css } from '@/styles/css';
import { Core } from './core';
import { calculateDomInnerPosition } from '@/utils/dom';
import Stats from 'stats.js';
import { FileViewer } from './components/fs';

function initCanvas2(canvas: HTMLCanvasElement) {
  const ctx2 = canvas.getContext('2d');
  if (!ctx2) return;
  const stats = new Stats();
  stats.showPanel(0);
  const parent = canvas.parentElement;
  if (parent) {
    parent.style.position = 'relative';
    stats.dom.style.position = 'absolute';
    const { top, left } = calculateDomInnerPosition(canvas);
    stats.dom.style.top = `${top}px`;
    stats.dom.style.left = `${left}px`;
    parent.appendChild(stats.dom);
  }
  
  let ticker = 0;
  const core = new Core();
  core.init().then(() => {
    console.log('init success');
    function animate() {
      if (!ctx2) return;
      ctx2.canvas.width = 400;
      ctx2.canvas.height = 300;
      ticker += 1; // Adjust speed by changing this value
      const pattern = core.wasm.randomPattern(400, 300, ticker);
      ctx2.putImageData(new ImageData(
        new Uint8ClampedArray(pattern),
        400,
        300,
      ), 0, 0);
      stats.update();
      // Update your canvas with the new pattern
      requestAnimationFrame(animate);
    }
    setTimeout(() => {
      animate();
    }, 50);
  })
}

export default function WasmPack() {
  const refCanvas = useRef<HTMLCanvasElement>(null);
  // const refCanvas2 = useRef<HTMLCanvasElement>(null);
  const refContainer = useRef<HTMLDivElement>(null);

  const stats = useRef<Stats>();

  const refRenderer = useRef<Renderer>();

  useEffect(() => {
    // const canvas2 = refCanvas2.current;
    // if (!canvas2) return;
    const canvas = refCanvas.current
    if (!canvas) return;
    const parent = refContainer.current;
    if (!parent) return;
    
    // initCanvas2(canvas2);
    const renderer = new Renderer(canvas);
    refRenderer.current = renderer;
    renderer.init().then((res) => {
      stats.current = new Stats();
      console.log('init worker impl success', res);
      parent.style.position = 'relative';
      stats.current.dom.style.position = 'absolute';
      const { top, left } = calculateDomInnerPosition(canvas);
      stats.current.dom.style.top = `${top}px`;
      stats.current.dom.style.left = `${left}px`;
      parent.appendChild(stats.current.dom);
      renderer.on('render', () => {
        stats.current?.update();
      });
    });

    return () => {
      renderer.destroy();
    }
  }, []);

  return <div className={css({ display: 'flex', flexDirection: 'column' })}>
    <h3 className={css({ fontSize: '20', mb: '1.5' })}>wasm-pack</h3>
    <p className={css({ fontSize: '14', mb: 2.5, color: 'gray.500' })}>rust wasm renderer in worker, frame data generated by rust in realtime</p>
    <div ref={refContainer} className={css({ display: 'flex', gap: 2.5 })}>
      <canvas width={400} height={300} ref={refCanvas}></canvas>
      {/* <canvas width={400} height={300} ref={refCanvas2}></canvas> */}
    </div>
    {/* <FileViewer renderer={refRenderer} /> */}
  </div>;
}
